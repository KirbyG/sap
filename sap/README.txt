sap is a TypeScript library for evolutionary algorithms that provides a common Neural Network form for expressing both populations and mutations. That is, a mutation in sap is expressed as a NN that consumes and produces another NN. We will test sap by building 5 apps that consume it: 1) a basic evo alg that searches a space of composition of mathematical functions to match a target function. Here sap provides the framework for describing the functions and their mutators. 2) An evo alg that searches for pairs of functions which produce similar output. We will need to carefully manage the population to guard against degeneracy, so sap will provide us with the tree operators we need for this. 3) An evo alg that uses a similar technique to search for pairs of SQL statements producing similar subsets of a table. 4) We will try to rebuild Ken Stanley's NEAT in sap. 5) An evo alg that searches mutation space for consistent changes in phenotype space at the same time as it searches the primary search space, making use of sap's meta-programming capacity. sap will be a flexible and extensible linguistic framework for building evolutionary algorithms in TypeScript. Its reusability of populations and mutations and the benefits of a consistent object structure will make it scientifically valuable for its power of expression. Its ease of integration with existing web technologies and web-hosted data lets it bring evolutionary algorithms into enterprise viability.